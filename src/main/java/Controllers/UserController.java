/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package Controllers;

import DAOs.AccountDAO;
import DAOs.CustomerDAO;
import DAOs.OrderDAO;
import Models.Account;
import Models.Customer;
import Models.Order;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class UserController extends HttpServlet {

    private void doPostUpdateInfo(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
//    int accountID = Integer.parseInt(request.getParameter("txtAccountID"));
        HttpSession session = request.getSession();
        int accountID = (Integer) session.getAttribute("userID");
        String lastName = request.getParameter("txtLastName");
        String firstName = request.getParameter("txtFirstName");
        String phoneNumber = request.getParameter("txtPhoneNumber");
        String gender = request.getParameter("txtGender");
        String address = request.getParameter("txtAddress");
        int result = 0;

        Customer customer = new Customer(firstName, lastName, gender, phoneNumber, address);
        CustomerDAO customerDAO = new CustomerDAO();
        AccountDAO accountDAO = new AccountDAO();
        Account account = accountDAO.getAccount(accountID);

        // If an Account already has an assigned Customer info (customerID)
        // then
        if (account.getCustomerID() != 0) {
            // Account has an associated Customer -> updates existing Customer
            // Retrieve the customerID of matching existing Customer
//            int customerID = customerDAO.getCustomer(lastName, firstName).getCustomerID();
            int customerID = account.getCustomerID();
            // which is then used to update the current Customer object
            customer.setCustomerID(customerID);
            result = customerDAO.update(customer);
            if (result != 1) {
                // New Customer failed to be updated
                session.setAttribute("toastMessage", "error-update-info");
                response.sendRedirect("/user");
                return;
            }
            // Customer info update is successful
            session.setAttribute("toastMessage", "success-update-info");
            response.sendRedirect("/user");
            return;
        } else {
            // Customer does not already exists -> create new Customer
            result = customerDAO.add(customer);
            if (result != 1) {
                // New Customer failed to be added to database
                session.setAttribute("toastMessage", "error-add-customer");
                response.sendRedirect("/user");
                return;
            }
            // Proceed to assign the customer to User account if the new Customer is
            // successfully added

            // Update the customer with the newly added Customer entry (with autogenerated ID)
            customer = customerDAO.getLatestCustomer();
            account.setCustomerID(customer.getCustomerID());
            result = accountDAO.update(account);
            if (result != 1) {
                // Either or both Customer insertion and Account update procedures are unsuccessful
                session.setAttribute("toastMessage", "error-add-customer");
                response.sendRedirect("/user");
                return;
            }
            // Both procedures are successful
            session.setAttribute("toastMessage", "success-update-info");
            response.sendRedirect("/user");
            return;
        }
    }

    private void doPostUpdateUser(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        int accountID = Integer.parseInt(request.getParameter("txtAccountID"));
        String username = request.getParameter("txtAccountUsername");
        String email = request.getParameter("txtEmail");
        AccountDAO accountDAO = new AccountDAO();
        int result = 0;
        if (request.getAttribute("txtAccountPassword") != null) {
            String password = (String) request.getAttribute("txtAccountPassword");
            Account account = new Account(username, email, password, "user");
            account.setAccountID(accountID);   
            result = accountDAO.update(account);
        } else {
            Account account = new Account(username, email, "user");
            account.setAccountID(accountID);            
            result = accountDAO.update(account);
        }
        
        if (result == 1) {
            session.setAttribute("toastMessage", "success-change-password");
            response.sendRedirect("/user");
            return;
        } else {
            session.setAttribute("toastMessage", "error-change-password");
            response.sendRedirect("/user");
            return;
        }
        
    }

    private void doGetCancelOrder(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        String path = request.getRequestURI();
        String[] s = path.split("/");
        int orderID = Integer.parseInt(s[s.length - 1]);
        LocalDateTime currentTime = LocalDateTime.now();
        // Chuyển đổi thời gian hiện tại thành Timestamp
        Timestamp cancelTime = Timestamp.valueOf(currentTime);
        OrderDAO orderDAO = new OrderDAO();
        int result = orderDAO.cancelOrder(orderID, cancelTime);
        
        session.setAttribute("tabID", 2);
        if (result != 1) {
            session.setAttribute("toastMessage", "error-cancel-order");
            response.sendRedirect("/user");
            return;
        }
        session.setAttribute("toastMessage", "success-cancel-order");
        response.sendRedirect("/user");
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        String path = request.getRequestURI();
        if (path.equals("/user")) {
            //<editor-fold defaultstate="collapsed" desc="Get user account info">
            int userID = 0;
            if (session.getAttribute("userID") != null){
                userID = (Integer) session.getAttribute("userID");
            } else {
                Cookie[] cookies = request.getCookies();
                Cookie userIDCookie = null;
                for (Cookie cookie : cookies) {
                if (cookie.getName().equals("userID")) {
                  userIDCookie = cookie;
                  session.setAttribute("userID", Integer.parseInt(userIDCookie.getValue()));
                  userID =  Integer.parseInt(userIDCookie.getValue());
                }
              }
            }
            AccountDAO accountDAO = new AccountDAO();
            Account currentAccount = accountDAO.getAccount(userID);

            request.setAttribute("currentAccount", currentAccount);
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="Get customer and order info if it exists">
            // This info will be used to preload the "Thông tin của tôi" form
            // Default int values are assigned 0 instead of null
            if (currentAccount.getCustomerID() != 0) {
                //<editor-fold defaultstate="collapsed" desc="Get customer info">
                int customerID = currentAccount.getCustomerID();
                CustomerDAO customerDAO = new CustomerDAO();
                Customer customer = customerDAO.getCustomer(customerID);

                request.setAttribute("customer", customer);
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="Get order info">
                OrderDAO orderDAO = new OrderDAO();
                List<Order> orderList = orderDAO.getOrdersFromCustomerList(customerID);
//                // Sorting orderList in decreasing order by ID
//                Collections.sort(orderList, new Comparator<Order>() {
//                    @Override
//                    public int compare(Order o1, Order o2
//                    ) {
//                        // Sort in decreasing order by ID
//                        return Integer.compare(o2.getOrderID(), o1.getOrderID());
//                    }
//                }
//                );

// Sorting orderList based on status in ascending order and ID in descending order
                Collections.sort(orderList, new Comparator<Order>() {
                    @Override
                    public int compare(Order o1, Order o2) {
                        // Compare status in ascending order
                        int statusComparison = Integer.compare(o1.getOrderStatusID(), o2.getOrderStatusID());

                        // If status is equal, sort by ID in descending order
                        if (statusComparison == 0) {
                            return Integer.compare(o2.getOrderID(), o1.getOrderID());
                        }

                        // Else sort by status in ascending order
                        return statusComparison;
                    }
                });
                for (int i = 0; i < orderList.size(); i++) {
                    orderList.get(i).setHashOrderID(orderList.get(i).md5Hash(Integer.toString(orderList.get(i).getOrderID())));
                }

                request.setAttribute("orderList", orderList);
                //</editor-fold>
            }
            //</editor-fold>
            session.setAttribute("tabID", 0);
            request.getRequestDispatcher("/user.jsp").forward(request, response);
        } else if (path.equals("/user/")) {
            session.setAttribute("tabID", 0);
            response.sendRedirect("/user");
        } else if (path.startsWith("/user/orders")) {
            request.setAttribute("tabID", 2);
            response.sendRedirect("/user");
        } else if (path.startsWith("/user/cancel")) {
            doGetCancelOrder(request, response);

        } else {
            session.setAttribute("toastMessage", "error-404");
            response.sendRedirect("/");
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (request.getParameter("btnSubmit") != null
                && (request.getParameter("btnSubmit")).equals("SubmitUpdateInfo")) {
            doPostUpdateInfo(request, response);
            session.setAttribute("tabID", 0);
        } else if (request.getParameter("btnSubmit") != null
                && (request.getParameter("btnSubmit")).equals("SubmitUpdateUser")) {
            doPostUpdateUser(request, response);
            session.setAttribute("tabID", 1);
        } else if (request.getParameter("btnSubmit") != null
                && (request.getParameter("btnSubmit")).equals("SubmitCancelOrder")) {
            doGetCancelOrder(request, response);
            session.setAttribute("tabID", 2);
        } else {
            session.setAttribute("toastMessage", "error-send-request");
            session.setAttribute("tabID", 0);
            response.sendRedirect("/user");
        }

    }

}
