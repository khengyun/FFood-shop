<%-- any content can be specified here e.g.: --%>
<%@ page pageEncoding="UTF-8" %>
<!-- Cart -->
<div class="modal" tabindex="-1" id="cart-modal">
    <div class="modal-dialog modal-xl modal-dialog-scrollable modal-dialog-centered modal-fullscreen-lg-down">
        <div class="modal-content px-4 py-3">
            <div class="modal-header pb-0 border-bottom-0">
                <h4 class="modal-title" id="exampleModalLabel">Giỏ hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body py-2">
                <%-- Putting form inside modal body ensures the modal's scrollability --%>
                <form id="cart-form" action="checkout" method="POST">
                    <div class="table-responsive">
                        <table id="cart-table" class="table table-sm table-hover mb-0">
                            <thead>
                                <tr>
                                    <th scope="col">Món ăn/Đồ uống</th>
                                    <th scope="col" style="min-width: 6em">Đơn giá</th>
                                    <th scope="col">Số lượng</th>
                                    <th scope="col" style="min-width: 6em">Số tiền</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody class="table-group-divider">
                            <p style="color: red;">${sessionScope.mess}</p>
                            <c:set var="totalPrice" value="0"></c:set>
                            <c:choose>
                                <c:when test="${sessionScope['cart'].items.isEmpty() || sessionScope['cart'].items == null}">
                                    <tr>
                                        <td colspan="5" class="text-center">
                                            <p id="empty-cart-label" class="fs-1 my-1">Giỏ hàng của bạn đang trống</p>
                                        </td>
                                    </tr>
                                </c:when>
                                <c:otherwise>
                                  <c:forEach var="cart" items="${sessionScope['cart'].items}">
                                <input type="text" name="fid" value="${cart.food.foodID}" hidden>
                                <tr class="align-middle">
                                    <!-- Image and Food name -->
                                    <td class="table-image-cell">
                                        <img src="${cart.food.imageURL}" alt="${cart.food.foodName}" class="me-3"/>
                                        ${cart.food.foodName}
                                    </td>
                                    <!-- Price -->
                                    <td class="item-price">${cart.food.getFoodPriceFormat()}</td>
                                    <!-- Quantity -->
                                    <!-- https://codepen.io/anitaparmar26/pen/BaLYMeN -->
                                    <td>
                                        <div class="d-flex input-group align-items-center">
                                          <input type="button" value="-" class="btn btn-outline-dark border border-dark border-1 button-minus px-2 py-1" data-field="quantity-${cart.food.foodID}">
                                          <input type="number" step="1" min="1" max="10" maxlength="2" style="width: 2em;" class="quantity-input quantity-field border border-dark border-1 border-start-0 border-end-0 text-center py-1" name="quantity-${cart.food.foodID}" value="${cart.foodQuantity}">
                                          <input type="button" value="+" class="btn btn-outline-dark border border-dark border-1 button-plus px-2 py-1" data-field="quantity-${cart.food.foodID}">
                                        </div>
                                    </td>
                                    <!-- Total -->
                                    <td class="item-total">
                                      <c:set var="productPrice" value="${Double.parseDouble(cart.food.foodPrice) * cart.foodQuantity}"/>
                                      <c:set var="totalPrice" value="${totalPrice + productPrice}"/>
                                      <fmt:formatNumber type="number" pattern="###,###"
                                                        value="${Double.parseDouble(cart.food.foodPrice) * cart.foodQuantity}"/> đ
                                    </td>
                                    <!-- Remove -->
                                    <td>
                                        <a href="deleteCart?fid=${cart.food.foodID}" 
                                                    class="d-flex btn btn-sm btn-outline-danger align-items-center px-3"
                                                    style="width:fit-content;"
                                                    onclick="return confirm('Bạn có muốn xóa Món này khỏi Giỏ hàng không?')">
                                                    <i class="ph-bold ph-trash fs-1 me-2"></i>
                                                    Xóa
                                        </a>
                                    </td>
                                </tr>
                            </c:forEach>
                            </c:otherwise>
                            </c:choose>
                            </tbody>
                            <tfoot class="table-group-divider">
                              <th colspan="5" class="text-end">
                                <h4 id="grand-total" class="mt-2">Tổng thanh toán: <fmt:formatNumber type="number" pattern="###,###"
                                  value="${totalPrice}"/> đ</h5>
                              </th>
                            </tfoot>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer flex-wrap pt-0">
              <button type="button" class="btn w-100 w-sm-auto btn-outline-dark px-4" data-bs-dismiss="modal" aria-label="Close">
                Tiếp tục chọn món
              </button>
              <%-- To solve the issue of submit button outside of the form element, just add "form" attribute --%>
              <button type="submit" class="btn w-100 w-sm-auto btn-primary px-5" id="btnSubmit" name="btnSubmit" form="cart-form" value="Checkout">
                Thanh toán
              </button>
            </div>
        </div>
    </div>
</div>

<style>
  #cart-modal input[type=number]::-webkit-inner-spin-button, 
  #cart-modal input[type=number]::-webkit-outer-spin-button { 
    -webkit-appearance: none; 
    margin: 0; 
  }
</style>

<script>
    // Get the cart table element
    const cartTable = document.getElementById("cart-table");

    // Get the cart badge element
    const cartBadge = document.getElementById("cart-badge");

    // Get the number of rows in the cart table
    const numRows = cartTable.getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;

    // If there are no rows or there is an empty cart label, disable the submit button and remove the cart badge
    // Otherwise, enable the submit button and add the cart badge
    if (numRows === 0 || document.getElementById("empty-cart-label")) {
        document.getElementById("btnSubmit").disabled = true;
        cartBadge.classList.add("d-none");
    } else {
        document.getElementById("btnSubmit").disabled = false;
        cartBadge.classList.remove("d-none");

        // Set the cart badge text to the number of rows
        if (numRows > 99) {
            cartBadge.innerText = "99+";
        } else if (numRows < 0) {
            cartBadge.innerText = "0";
        } else {
            cartBadge.innerText = numRows;
        }
    }

    // Restrict user input to reject non-numeric characters
    // except for navigation keys and backspace/delete
    $('.quantity-input').on('keydown', (e) => {
      let key = e.key;
      let isDigit = /^\d$/.test(key);
      let target = $(e.target);
      let allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Backspace', 'Delete'];
      let isException = allowedKeys.includes(key);

      // Prevents the user from typing more than 2 digits
      // If target is of HTML input element, use e.target.value
      // If target is of jQuery object, use $(e.target).val()
      if (isDigit) {
        if (target.val().length >= 2) {
          e.preventDefault();
        }
      }
      
      // Check if the key is a number
      if (!isDigit && !isException) {
        e.preventDefault();
      }
    })

    let oldQuantity = 1;
    // Set the old quantity variable to the value of the input field (before the user types anything), 
    // so that this will be used to restore the original quantity in case
    // the new quantity is invalid
    $('.quantity-input').on('focus', (e) => {
      const target = $(e.target);      
      oldQuantity = parseInt(target.val(), 10);
    })

    // Validates the user quantity input only when the user clicks outside of the input field
    // instead of immediately upon value change. Because we want the user to safely delete the old number
    // and input a new one without the price values going crazy
    $('.quantity-input').on('blur', (e) => {
      // Get the parent table row of the input field
      const tableRow = event.target.closest("tr");
      const target = $(e.target);
      // Get the price per unit of the food from the data attribute or other source
      const pricePerUnitText = tableRow.querySelector("td:nth-child(2)").textContent.trim();
      const pricePerUnit = parseFloat(pricePerUnitText.replace("đ", "").replace(",", ""));
      
      // Get the quantity entered by the user
      const currentQuantity = parseInt(event.target.value, 10);

      // Validates the user input, making sure it is within 1-10
      let newQuantity =
        !isNaN(currentQuantity) && currentQuantity >= 1 && currentQuantity <= 10 // user input is valid
          ? currentQuantity
          : oldQuantity; // This is retrieve before the user typed anything, so this acts as the backup value

      // https://stackoverflow.com/questions/45069106/jquery-doesnt-handle-event-target-properly-why
      target.val(newQuantity);
      
      // Calculate the new product price
      const itemTotal = pricePerUnit * newQuantity;
      
      // Update the product price cell in the same row
      // Format the total price string so that it can be displayed correctly to the user
      formattedItemTotal = itemTotal.toLocaleString();
      $(tableRow).find(".item-total").html(formattedItemTotal + " đ");
      
      // Calculate and update the total price
      updateTotalPrice();
    })

    // Function to update the total price based on all product prices
    function updateTotalPrice() {
        let totalPrice = 0;
        // Iterate through all rows in the table and calculate the total price
        const rows = document.querySelectorAll("#cart-table tbody tr");
        rows.forEach(function (row) {
            const productPriceText = row.querySelector("td:nth-child(4)").textContent.trim();
            const productPrice = parseFloat(productPriceText.replace("đ", "").replace(",", ""));
            totalPrice += productPrice;
        });
        // Update the total price element
        const totalPriceElement = document.querySelector("#grand-total");
        totalPriceElement.textContent = "Tổng thanh toán: " + totalPrice.toLocaleString() + "đ";
    }

    /**
     * Increments the value of a field by 1 when triggered by an event.
     *
     * @param {Event} e - The event object.
     * @return {number} The new value.
     */
    function incrementValue(e) {
      e.preventDefault();
      let target = $(e.target);
      let fieldName = target.data("field");
      let parent = target.closest("div");
      let quantityInput = parent.find("input[name=" + fieldName + "]");
      let currentQuantity = parseInt(quantityInput.val(), 10);

      // Set the new value, making sure it is within 1-10
      let newQuantity =
        !isNaN(currentQuantity) && currentQuantity >= 1 && currentQuantity < 10
          ? currentQuantity + 1
          : 10;
      quantityInput.val(newQuantity);

      return newQuantity;
    }

    /**
     * Decrements the value of an input field by 1.
     *
     * @param {Event} e - The event object.
     * @return {number} The new value.
     */
    function decrementValue(e) {
      e.preventDefault();
      let target = $(e.target);
      let fieldName = target.data("field");
      let parent = target.closest("div");
      let quantityInput = parent.find("input[name=" + fieldName + "]");
      let currentQuantity = parseInt(quantityInput.val(), 10);

      // Set the new value, making sure it is within 1-10
      let newQuantity =
        !isNaN(currentQuantity) && currentQuantity > 1 && currentQuantity <= 10
          ? currentQuantity - 1
          : 1;
      quantityInput.val(newQuantity);

      return newQuantity;
    }

    /**
     * Extracts the price from a string representation of a currency value.
     *
     * @param {string} str - The string representation of the currency value.
     * @return {number} The price as a numeric value.
     */
    function getPrice(str) {
      let trimmedStr = str
        .replace(" đ", "") // Removes currency symbol and space before it
        .replace(",", ""); // Removes thousand separators
      return parseInt(trimmedStr);
    }

    $(".input-group").on("click", ".button-plus", (e) => {
      let quantity = incrementValue(e);
      let target = $(e.target);
      let tableRow = target.closest("tr");
      let itemPriceStr = $(tableRow).find(".item-price").html();
      let itemPrice = getPrice(itemPriceStr);
      let itemTotal = itemPrice * quantity;

      // Format the total price string so that it can be displayed correctly to the user
      formattedItemTotal = itemTotal.toLocaleString();
      $(tableRow).find(".item-total").html(formattedItemTotal + " đ");

      updateTotalPrice();
    });

    $(".input-group").on("click", ".button-minus", (e) => {
      let quantity = decrementValue(e);
      let target = $(e.target);
      let tableRow = target.closest("tr");
      let itemPriceStr = $(tableRow).find(".item-price").html();
      let itemPrice = getPrice(itemPriceStr);
      let itemTotal = itemPrice * quantity;

      // Format the total price string so that it can be displayed correctly to the user
      formattedItemTotal = itemTotal.toLocaleString();
      $(tableRow).find(".item-total").html(formattedItemTotal + " đ");

      updateTotalPrice();
    });

</script>
