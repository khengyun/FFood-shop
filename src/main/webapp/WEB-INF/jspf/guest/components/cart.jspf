<%-- any content can be specified here e.g.: --%>
<%@ page pageEncoding="UTF-8" %>
<!-- Cart -->
<div class="modal" tabindex="-1" id="cart-modal">
    <div class="modal-dialog modal-xl modal-dialog-scrollable modal-dialog-centered modal-fullscreen-lg-down">
        <div class="modal-content p-1 px-sm-4 py-sm-3">
            <div class="modal-header border-bottom-0">
                <h4 class="modal-title" id="exampleModalLabel">Giỏ hàng</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body py-0">
                <%-- Putting form inside modal body ensures the modal's scrollability --%>
                <form id="cart-form" action="checkout" method="POST">
                    <div class="table-responsive">
                        <table id="cart-table" class="table table-sm table-hover mb-0">
                            <thead>
                                <tr>
                                    <th scope="col">Món ăn / Đồ uống</th>
                                    <th scope="col" style="min-width: 6em">Đơn giá</th>
                                    <th scope="col" style="min-width: 6em">Số lượng</th>
                                    <th scope="col" style="min-width: 6em" class="d-none d-md-table-cell">Số tiền</th>
                                    <th scope="col" class="d-none d-md-table-cell">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody class="table-group-divider" id="cart-table-body">
                            </tbody>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-top-0 pt-0 flex-wrap">
                <h5 id="grand-total" class="mb-3 pt-2 w-100 text-end border-top border-black border-2">Tổng thanh toán: <fmt:formatNumber type="number" pattern="###,###"
                                                                                                                                          value="${totalPrice}"/> đ</h5>
                <button type="button" class="btn w-100 w-sm-auto btn-outline-dark px-4" data-bs-dismiss="modal" aria-label="Close">
                    Tiếp tục chọn món
                </button>
                <%-- To solve the issue of submit button outside of the form element, just add "form" attribute --%>
                <button type="submit" class="btn w-100 w-sm-auto btn-primary px-5" id="btnSubmit" name="btnSubmit" form="cart-form" value="Checkout">
                    Thanh toán
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    #cart-modal input[type=number]::-webkit-inner-spin-button,
    #cart-modal input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    #cart-modal .modal-body {
        -webkit-box-shadow: inset 0px 20px 36px -30px rgba(0,0,0,0.04),
            inset 0px -20px 36px -30px rgba(0,0,0,0.04);
        box-shadow: inset 0px 20px 36px -30px rgba(0,0,0,0.04),
            inset 0px -20px 36px -30px rgba(0,0,0,0.04);
        -moz-box-shadow: inset 0px 20px 36px -30px rgba(0,0,0,0.04),
            inset 0px -20px 36px -30px rgba(0,0,0,0.04);
    }
</style>

<script>
    updateCartInformation();
    updateCartDisplay();


    // Retrieve the JSON food list from the session in JavaScript
    var jsonFoodList = '<%= session.getAttribute("jsonFoodList")%>';
    // Parse the JSON string back to a JavaScript array
    var foodLists = JSON.parse(jsonFoodList);
    // Initialize an empty array to represent the cart items

    // Function to add a food item to the cart
    function addToCart(foodID, quantity) {
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];
        var existingItem = cartItems.find(item => item.foodID === foodID);
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            var foodItem = foodLists.find(item => item.foodID === foodID);
            if (foodItem) {
                cartItems.push({foodID: foodItem.foodID, foodName: foodItem.foodName, quantity: quantity, price: foodItem.foodPrice, discount: foodItem.discountPercent});
            }
        }
        // Store the updated cart back in session storage
        sessionStorage.setItem("cart", JSON.stringify(cartItems));
        // Update the cart display in the modal
        updateCartInformation();
        updateTotalPrice();
        updateCartDisplay();
    }

    function updateCartDisplay() {
        // Get the cart items from sessionStorage
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];

        // Reference to the table body in your cart modal
        var cartTableBody = document.getElementById("cart-table-body");

        // Variable to store the total price of items in the cart
        var totalPrice = 0;

        // Clear the existing cart table rows
        cartTableBody.innerHTML = "";

        // If cartItems is empty, display an empty cart message
        if (cartItems.length === 0) {
            var emptyCartRow = document.createElement("tr");
            emptyCartRow.innerHTML = '\
            <td colspan="5" class="text-center">' +
                    '<p id="empty-cart-label" class="fs-1 my-1">Giỏ hàng của bạn đang trống</p>' +
                    '</td>';
            cartTableBody.appendChild(emptyCartRow);
        } else {
            // Loop through cartItems and update the table rows in the modal
            cartItems.forEach(function (cartItem) {
                // Create a new table row for each cart item
                var row = document.createElement("tr");
                row.id = "cart-item-" + cartItem.foodID;

                // Create table cells for each property of the cart item
                var nameCell = document.createElement("td");
                nameCell.textContent = cartItem.foodName;
                row.appendChild(nameCell);

                var priceCell = document.createElement("td");
                priceCell.textContent = parseFloat(cartItem.price - (cartItem.price * cartItem.discount / 100)).toLocaleString() + "đ";
                row.appendChild(priceCell);

                // Quantity cell
                var quantityCell = document.createElement("td");
                quantityCell.className = "quantity-cell";

                var quantityContainer = document.createElement("div");
                quantityContainer.className = "d-flex input-group align-items-center";

                var decreaseButton = document.createElement("input");
                decreaseButton.type = "button";
                decreaseButton.value = "-";
                decreaseButton.className = "btn btn-outline-dark border border-dark border-1 button-minus px-2 py-1";
                decreaseButton.dataset.field = "quantity-" + cartItem.foodID;
                decreaseButton.setAttribute("onclick", "decrementValue(event, "+cartItem.foodID+")");

                var quantityInput = document.createElement("input");
                quantityInput.type = "number";
                quantityInput.step = "1";
                quantityInput.min = "1";
                quantityInput.max = "10";
                quantityInput.maxLength = "2";
                quantityInput.style.width = "2em";
                quantityInput.className = "quantity-input quantity-field border border-dark border-1 border-start-0 border-end-0 text-center py-1";
                quantityInput.name = "quantity-" + cartItem.foodID;
                quantityInput.value = cartItem.quantity;

                var increaseButton = document.createElement("input");
                increaseButton.type = "button";
                increaseButton.value = "+";
                increaseButton.className = "btn btn-outline-dark border border-dark border-1 button-plus px-2 py-1";
                increaseButton.dataset.field = "quantity-" + cartItem.foodID;
                increaseButton.setAttribute("onclick", "incrementValue(event,"+cartItem.foodID+")");

                quantityContainer.appendChild(decreaseButton);
                quantityContainer.appendChild(quantityInput);
                quantityContainer.appendChild(increaseButton);

                quantityCell.appendChild(quantityContainer);
                row.appendChild(quantityCell);

                // Total cell
                var totalCell = document.createElement("td");
                var itemTotal = parseFloat(cartItem.price - (cartItem.price * cartItem.discount / 100)) * cartItem.quantity;
                totalCell.textContent = itemTotal.toLocaleString() + "đ";
                totalCell.className = "item-total d-none d-md-table-cell";
                row.appendChild(totalCell);

                // Remove cell
                var removeCell = document.createElement("td");
                var removeButton = document.createElement("button");
                removeButton.type = "button";
                removeButton.style.width = "fit-content";
                removeButton.className = "d-flex btn btn-sm btn-outline-danger align-items-center px-2 px-sm-3";
                removeButton.onclick = function () {
                    deleteCartItem(cartItem.foodID);
                };
                removeButton.innerHTML = '\
                <i class="ph-bold ph-trash fs-1"></i>' +
                        '<span class="d-none d-md-flex ms-2">Xoá</span>';
                removeCell.appendChild(removeButton);
                row.appendChild(removeCell);

                // Append the table row to the cart table body
                cartTableBody.appendChild(row);

                // Update the total price
                totalPrice += itemTotal;

                // Update quantity on input change
                quantityInput.addEventListener("change", function () {
                    cartItem.quantity = parseInt(quantityInput.value);
                    sessionStorage.setItem("cart", JSON.stringify(cartItems));
                    updateTotalPrice();
                });
            });
        }

        // Update the total price element in the modal
        var totalPriceElement = document.getElementById("grand-total");
        totalPriceElement.textContent = "Tổng thanh toán: " + totalPrice.toLocaleString() + "đ";
    }
    
    function formatCurrency(amount) {
        return amount.toLocaleString(undefined, { style: 'currency', currency: 'VND' });
    }


    // Function to update cart information
    function updateCartInformation() {
        // Get the cart table element
        const cartTable = document.getElementById("cart-table");
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];
        // Get the cart badge elements
        const cartBadges = document.getElementsByClassName("cart-badge");

        const numCartItem = cartItems.length;
       

        // If there are no rows or there is an empty cart label, disable the submit button and remove the cart badge
        // Otherwise, enable the submit button and add the cart badge
        if (numCartItem === 0) {
            document.getElementById("btnSubmit").disabled = true;
            for (const badge of cartBadges) {
                badge.classList.add("d-none");
            }
        } else {
            document.getElementById("btnSubmit").disabled = false;

            // Remove the cart badge. Class selectors return HTMLCollection, so we use a for-of loop
            // https://stackoverflow.com/questions/22754315/for-loop-for-htmlcollection-elements
            for (const badge of cartBadges) {
                badge.classList.remove("d-none");
            }

            // Set the cart badge text to the number of rows
            for (const badge of cartBadges) {
                if (numCartItem > 99) {
                    badge.innerText = "+99";
                } else if (numCartItem <= 0) {
                    badge.innerText = "";
                } else {
                    badge.innerText = numCartItem;
                }
                ;
            }
            ;
        }

        // Update the total price
        updateTotalPrice();
    }

    function deleteCartItem(foodID) {

        let cartItem = document.getElementById("cart-item-" + foodID);
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];

        // Performs an AJAX request to delete the cart item if it exists
        if (cartItem) {
            // Create a XMLHttpRequest object
            let xhr = new XMLHttpRequest();
            xhr.open("GET", "deleteCart?fid=" + foodID, true);
            // Send the request to the server
            xhr.send();
            cartItem.parentNode.removeChild(cartItem);
            
            // Find the index of the item with the specified foodID in the cartItems array
            var itemIndex = cartItems.findIndex(item => item.foodID === foodID);
            if (itemIndex !== -1) {
                cartItems.splice(itemIndex, 1);
                sessionStorage.setItem("cart", JSON.stringify(cartItems));
            }

            // Checks if the cart is empty after this action
            // If yes, insert a row with an empty cart label
            if (document.getElementById("cart-table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length === 0) {
                // Insert a row with an empty cart label
                let row = document.createElement("tr");

                let cell = document.createElement("td");
                cell.setAttribute("colspan", "5");
                cell.setAttribute("class", "text-center");
                cell.setAttribute("id", "empty-cart-label");

                let paragraph = document.createElement("p");
                paragraph.setAttribute("id", "empty-cart-label");
                paragraph.setAttribute("class", "fs-1 my-1");
                paragraph.innerText = "Giỏ hàng của bạn đang trống";

                row.appendChild(cell);
                cell.appendChild(paragraph);
                document.getElementById("cart-table").getElementsByTagName("tbody")[0].appendChild(row);
            }
            updateCartInformation();
            updateTotalPrice();
            updateCartDisplay();
        } else {
            console.error("Không tìm thấy sản phẩm để xóa.");
        }
    }

    // Restrict user input to reject non-numeric characters
    // except for navigation keys and backspace/delete
    $('.quantity-input').on('keydown', (e) => {
        let key = e.key;
        let isDigit = /^\d$/.test(key);
        let target = $(e.target);
        let allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Backspace', 'Delete'];
        let isException = allowedKeys.includes(key);

        // Prevents the user from typing more than 2 digits
        // If target is of HTML input element, use e.target.value
        // If target is of jQuery object, use $(e.target).val()
        if (isDigit) {
            if (target.val().length >= 2) {
                e.preventDefault();
            }
        }

        // Check if the key is a number
        if (!isDigit && !isException) {
            e.preventDefault();
        }
    })

    let oldQuantity = 1;
    // Set the old quantity variable to the value of the input field (before the user types anything), 
    // so that this will be used to restore the original quantity in case
    // the new quantity is invalid
    $('.quantity-input').on('focus', (e) => {
        const target = $(e.target);
        oldQuantity = parseInt(target.val(), 10);
    })

    // Validates the user quantity input only when the user clicks outside of the input field
    // instead of immediately upon value change. Because we want the user to safely delete the old number
    // and input a new one without the price values going crazy
    $('.quantity-input').on('blur', (e) => {
        // Get the parent table row of the input field
        const tableRow = event.target.closest("tr");
        const target = $(e.target);
        // Get the price per unit of the food from the data attribute or other source
        const pricePerUnitText = tableRow.querySelector("td:nth-child(2)").textContent.trim();
        const pricePerUnit = parseFloat(pricePerUnitText.replace("đ", "").replace(",", ""));

        // Get the quantity entered by the user
        const currentQuantity = parseInt(event.target.value, 10);

        // Validates the user input, making sure it is within 1-10
        let newQuantity =
                !isNaN(currentQuantity) && currentQuantity >= 1 && currentQuantity <= 10 // user input is valid
                ? currentQuantity
                : oldQuantity; // This is retrieve before the user typed anything, so this acts as the backup value

        // https://stackoverflow.com/questions/45069106/jquery-doesnt-handle-event-target-properly-why
        target.val(newQuantity);
        // Calculate the new product price
        const itemTotal = pricePerUnit * newQuantity;

        // Update the product price cell in the same row
        // Format the total price string so that it can be displayed correctly to the user
        formattedItemTotal = itemTotal.toLocaleString();
        $(tableRow).find(".item-total").html(formattedItemTotal + " đ");

        // Calculate and update the total price
        updateTotalPrice();
    });

    function updateTotalPrice() {
        let totalPrice = 0;

        // Get the cart items from sessionStorage
        const cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];

        // Iterate through cart items and calculate the total price
        cartItems.forEach(function (cartItem) {
            const itemTotal = parseFloat(cartItem.price - (cartItem.price * cartItem.discount / 100)) * cartItem.quantity;
            totalPrice += itemTotal;
        });

        // Update the total price element
        const totalPriceElement = document.getElementById("grand-total");
        totalPriceElement.textContent = "Tổng thanh toán: " + totalPrice.toLocaleString() + "đ";
    }

    /**
     * Increments the value of a field by 1 when triggered by an event.
     *
     * @param {Event} e - The event object.
     * @return {number} The new value.
     */
    function incrementValue(e, foodID) {
        e.preventDefault();
        const tableRow = e.target.closest("tr");
        let target = $(e.target);
        let fieldName = target.data("field");
        let parent = target.closest("div");
        let quantityInput = parent.find("input[name=" + fieldName + "]");
        let currentQuantity = parseInt(quantityInput.val(), 10);
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];
        var existingItem = cartItems.find(item => item.foodID === foodID);
        var pricePerUnit = parseFloat(existingItem.price - (existingItem.price * existingItem.discount / 100));
        // Set the new value, making sure it is within 1-10
        let newQuantity =
                !isNaN(currentQuantity) && currentQuantity >= 1 && currentQuantity < 10
                ? currentQuantity + 1
                : 10;
        

        if (existingItem) {
            // Update the quantity of the existing item
            existingItem.quantity = newQuantity;

            // Store the updated cart back in session storage
            sessionStorage.setItem("cart", JSON.stringify(cartItems));
            updateTotalPrice();
        }
        const itemTotal = pricePerUnit * newQuantity;
        formattedItemTotal = itemTotal.toLocaleString();
        $(tableRow).find(".item-total").html(formattedItemTotal + " đ");
        
        quantityInput.val(newQuantity);
    }

    /**
     * Decrements the value of an input field by 1.
     *
     * @param {Event} e - The event object.
     * @return {number} The new value.
     */
    function decrementValue(e, foodID) {
        e.preventDefault();
        const tableRow = e.target.closest("tr");
        let target = $(e.target);
        let fieldName = target.data("field");
        let parent = target.closest("div");
        let quantityInput = parent.find("input[name=" + fieldName + "]");
        let currentQuantity = parseInt(quantityInput.val(), 10);
        var cartItems = JSON.parse(sessionStorage.getItem("cart")) || [];
        var existingItem = cartItems.find(item => item.foodID === foodID);
        var pricePerUnit = parseFloat(existingItem.price - (existingItem.price * existingItem.discount / 100));

        // Set the new value, making sure it is within 1-10
        let newQuantity =
                !isNaN(currentQuantity) && currentQuantity > 1 && currentQuantity <= 10
                ? currentQuantity - 1
                : 1;
        if (existingItem) {
            // Update the quantity of the existing item
            existingItem.quantity = newQuantity;

            // Store the updated cart back in session storage
            sessionStorage.setItem("cart", JSON.stringify(cartItems));
            updateTotalPrice();
        }
        const itemTotal = pricePerUnit * newQuantity;
        formattedItemTotal = itemTotal.toLocaleString();
        $(tableRow).find(".item-total").html(formattedItemTotal + " đ");
        quantityInput.val(newQuantity);
    }
</script>
